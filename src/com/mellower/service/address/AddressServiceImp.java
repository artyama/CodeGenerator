/**
 * This code generated by CodeGenerator<320132929@qq.com>
 */
package com.mellower.service.address;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jy.common.mybatis.Page;
import com.jy.common.utils.JsonUtil;
import com.jy.common.utils.base.Const;
import com.jy.service.base.BaseServiceImp;
import com.mellower.common.utils.JavaNSUnixTimeFormat;
import com.mellower.common.utils.MarsBeanUtils;
import com.mellower.entity.address.Address;
import com.mellower.entity.address.AddressWithBLOBs;
import com.mellower.entity.address.AddressExample;
import com.mellower.repository.address.AddressMapper;

import net.sf.json.JSONObject;
import net.sf.json.util.JSONUtils;

@Service("AddressService")
public class AddressServiceImp extends BaseServiceImp<Address> implements AddressService {

	@Autowired
	private AddressMapper addressBaseDao;
	
	@Override
	public Integer saveOrUpdate(AddressWithBLOBs entity) {
		if(entity.getId()==null){
			addressBaseDao.insertSelective(entity);
		}
		else{
			addressBaseDao.updateByPrimaryKey(entity);
		}
		return entity.getId();
	}
	@Override
	public Page<Address> findByPage(Address o, Page<Address> page) {
		AddressExample example = new AddressExample();
		example.setLimitStart(page.getPageSize()*(page.getPageNum()-1));
		example.setLimitEnd(page.getPageSize()*page.getPageNum());
		List<Address> list= addressBaseDao.selectByExample(example);
		long totalRecord = addressBaseDao.countByExample(example);
		page.setResults(list);
		page.setTotalPage((int)totalRecord/page.getPageSize());
		page.setTotalRecord((int)totalRecord);
		return page;
	}
	
	
	public Address findById(Integer id){
		return addressBaseDao.selectByPrimaryKey(id);
	}
	@Override
	public int saveSelective(Address record) {
		return addressBaseDao.insertSelective(record);
	}
	
	@Override
	public List<Address> findByExample(AddressExample example) {
		return addressBaseDao.selectByExample(example);
	}
	@Override
	public int updateByIdSelective(Address record) {
		return addressBaseDao.updateByPrimaryKeySelective(record);
	}
	@Override
	public int deleteById(Integer id) {
		return addressBaseDao.deleteByPrimaryKey(id);
	}
	
	@Override
	@Transactional
	public void afterdeploy() {
		super.afterdeploy();
	}
	
}